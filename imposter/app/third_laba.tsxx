'use client'

import React, { useEffect, useState } from 'react';
import Head from 'next/head';
import Web3 from 'web3';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Wallet,
  Send,
  Loader,
  AlertCircle,
  RefreshCw,
  Sword,
  Trophy,
  Crown,
  Sparkles,
} from 'lucide-react';
import TokenABI from '../../build/contracts/Token.json';

const contractAddress = "0xc4b187f5cc2a243a0616f0f5e2331ae64e83384a";
const AMOY_CHAIN_ID = '0x13882';
const AMOY_RPC_URL = 'https://rpc-amoy.polygon.technology';

const funnyQuotes = [
  "ИМБУЛЯ - токен, который нерфить не будут!",
  "Баланс? Не, не слышали",
  "Создатели Dark Souls нервно курят в сторонке",
  "Токен с характеристиками 99/99/99",
  "Кошелёк: «Ещё один ИМБУЛЯ, и я стану боссом»",
  "ИМБУЛЯ - когда надоело играть по правилам",
  "С великой имбой приходит великая ответственность",
  "Заходит как-то ИМБУЛЯ в MetaMask...",
  "Кто рано встаёт, тот ИМБУЛЮ найдёт",
  "ИМБУЛЯ в кошельке - полный респект в строке",
  "Когда твой токен настолько имба, что другие токены качают прокачку",
  "ИМБУЛЯ: потому что скилл - это не главное",
  "Этот токен качается даже когда ты спишь"
];

interface Web3Window extends Window {
  ethereum?: any;
}

declare let window: Web3Window;

const switchToAmoyNetwork = async () => {
  if (!window.ethereum) return false;
  try {
    await window.ethereum.request({
      method: 'wallet_switchEthereumChain',
      params: [{ chainId: AMOY_CHAIN_ID }],
    });
    return true;
  } catch (switchError: any) {
    if (switchError.code === 4902) {
      try {
        await window.ethereum.request({
          method: 'wallet_addEthereumChain',
          params: [{
            chainId: AMOY_CHAIN_ID,
            chainName: 'Polygon Amoy Testnet',
            nativeCurrency: { name: 'POL', symbol: 'POL', decimals: 18 },
            rpcUrls: [AMOY_RPC_URL],
            blockExplorerUrls: ['https://www.oklink.com/amoy'],
          }],
        });
        return true;
      } catch (addError) {
        console.error('Failed to add Polygon Amoy network', addError);
      }
    }
    console.error('Failed to switch to Polygon Amoy network', switchError);
  }
  return false;
};

export default function Page() {
  const [web3, setWeb3] = useState<Web3 | null>(null);
  const [userAddress, setUserAddress] = useState<string>('');
  const [contract, setContract] = useState<any>(null);
  const [networkId, setNetworkId] = useState<number | null>(null);
  const [balance, setBalance] = useState<string>('0');
  const [recipient, setRecipient] = useState<string>('');
  const [amount, setAmount] = useState<string>('');
  const [mintRecipient, setMintRecipient] = useState<string>('');
  const [mintAmount, setMintAmount] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');
  const [currentQuote, setCurrentQuote] = useState<number>(0);
  const [powerLevel, setPowerLevel] = useState<string>('9000');

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentQuote((prev) => (prev + 1) % funnyQuotes.length);
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    checkNetwork();
    if (window.ethereum) {
      window.ethereum.on('chainChanged', () => window.location.reload());
      window.ethereum.on('accountsChanged', () => window.location.reload());
    }
  }, []);

  useEffect(() => {
    if (web3 && userAddress && contract) {
      fetchBalance();
    }
  }, [web3, userAddress, contract]);

  const checkNetwork = async () => {
    if (window.ethereum) {
      try {
        const chainId = await window.ethereum.request({ method: 'eth_chainId' });
        setNetworkId(parseInt(chainId, 16));
      } catch (err) {
        console.error('Error checking network:', err);
      }
    }
  };

  const fetchBalance = async () => {
    try {
      const balance = await contract.methods.balanceOf(userAddress).call();
      setBalance(web3!.utils.fromWei(balance, 'ether'));
    } catch (err) {
      console.error('Error fetching balance:', err);
    }
  };

  const handleConnect = async () => {
    try {
      setLoading(true);
      setError('');

      if (!window.ethereum) {
        throw new Error('MetaMask не установлен! Установите MetaMask для получения суперсилы ИМБУЛИ');
      }

      const networkSwitched = await switchToAmoyNetwork();
      if (!networkSwitched) {
        throw new Error('Не удалось переключиться на сеть Amoy. ИМБУЛЯ требует особой сети!');
      }

      const web3Instance = new Web3(window.ethereum);
      const accounts = await window.ethereum.request({
        method: 'eth_requestAccounts'
      });

      if (!accounts || accounts.length === 0) {
        throw new Error('Не удалось получить доступ к кошельку. ИМБУЛЯ грустит :(');
      }

      const address = accounts[0];
      const contractInstance = new web3Instance.eth.Contract(
        TokenABI.abi,
        contractAddress
      );

      setUserAddress(address);
      setWeb3(web3Instance);
      setContract(contractInstance);
      setSuccess('Кошелёк заряжен силой ИМБУЛИ! Готов к эпичным трансферам!');
    } catch (err: any) {
      setError(err.message || 'Ошибка подключения');
      console.error('Connection error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleTransfer = async () => {
    if (!web3 || !userAddress || !contract) {
      setError('Сначала подключите кошелёк!');
      return;
    }

    if (!recipient || !amount) {
      setError('Заполните все поля!');
      return;
    }

    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const gasPrice = await web3.eth.getGasPrice();
      const amountInWei = web3.utils.toWei(amount, 'ether');

      const gasEstimate = await contract.methods.transfer(recipient, amountInWei)
        .estimateGas({ from: userAddress });

      await contract.methods.transfer(recipient, amountInWei)
        .send({
          from: userAddress,
          gas: BigInt(Math.round(Number(gasEstimate) * 1.2)),
          gasPrice: BigInt(gasPrice)
        });

      setSuccess('ИМБУЛЯ успешно передана! Получатель стал сильнее!');
      setAmount('');
      setRecipient('');
      await fetchBalance();
    } catch (err: any) {
      console.error('Transfer error:', err);
      if (err.code === 4001) {
        setError('Транзакция отменена пользователем');
      } else if (err.message.includes('gas')) {
        setError('Недостаточно газа для выполнения транзакции');
      } else {
        setError('Ошибка при передаче токенов');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleMint = async () => {
    if (!web3 || !userAddress || !contract) {
      setError('Сначала подключите кошелёк!');
      return;
    }

    if (!mintRecipient || !mintAmount) {
      setError('Заполните все поля!');
      return;
    }

    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const gasPrice = await web3.eth.getGasPrice();
      const amountInWei = web3.utils.toWei(mintAmount, 'ether');

      const gasEstimate = await contract.methods.mint(mintRecipient, amountInWei)
        .estimateGas({ from: userAddress });

      await contract.methods.mint(mintRecipient, amountInWei)
        .send({
          from: userAddress,
          gas: BigInt(Math.round(Number(gasEstimate) * 1.2)),
          gasPrice: BigInt(gasPrice)
        });

      setSuccess('Новая ИМБУЛЯ успешно создана! Мощь растёт!');
      setMintAmount('');
      setMintRecipient('');
      await fetchBalance();
    } catch (err: any) {
      console.error('Mint error:', err);
      setError('Ошибка при создании токенов');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-pink-50 p-4 md:p-8">
      <Head>
        <title>ИМБУЛЯ Token | Самый имбовый токен в истории</title>
        <meta name="description" content="ИМБУЛЯ - когда обычные токены слишком слабы" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <motion.main
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="max-w-4xl mx-auto space-y-8"
      >
        <motion.div
          initial={{ scale: 0.9 }}
          animate={{ scale: 1 }}
          className="text-center space-y-4"
        >
          <div className="flex justify-center items-center space-x-3">
            <Crown className="w-8 h-8 text-yellow-500" />
            <h1 className="text-5xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-blue-600">
              ИМБУЛЯ
            </h1>
            <Crown className="w-8 h-8 text-yellow-500" />
          </div>

          <AnimatePresence mode="wait">
            <motion.p
              key={currentQuote}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="text-gray-600 italic"
            >
              {funnyQuotes[currentQuote]}
            </motion.p>
          </AnimatePresence>
        </motion.div>

        <AnimatePresence>
          {(error || success) && (
            <motion.div
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
              className={`p-4 rounded-lg flex items-center space-x-2 ${
                error
                  ? 'bg-red-50 border border-red-200 text-red-600'
                  : 'bg-green-50 border border-green-200 text-green-600'
              }`}
            >
              {error ? <AlertCircle className="w-5 h-5" /> : <Sparkles className="w-5 h-5" />}
              <span>{error || success}</span>
            </motion.div>
          )}
        </AnimatePresence>

        <motion.div
          className="p-8 bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl relative overflow-hidden"
          whileHover={{ boxShadow: "0 25px 50px -12px rgba(0, 0, 0, 0.15)" }}
        >
          <div className="absolute top-2 right-2 flex items-center space-x-2 text-yellow-500">
            <Trophy className="w-5 h-5" />
            <span className="text-sm">Power Level: {powerLevel}</span>
          </div>

          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center space-x-2">
              <Sword className="w-6 h-6 text-purple-500" />
              <h2 className="text-2xl font-bold text-gray-800">Сила ИМБУЛИ</h2>
            </div>
            <motion.button
              whileHover={{ scale: 1.05, rotate: 360 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => fetchBalance()}
              className="p-2 text-purple-500 hover:text-purple-600 transition-colors"
            >
              <RefreshCw className="w-5 h-5" />
            </motion.button>
          </div>

          <div className="text-4xl font-bold text-center mb-2 bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-blue-600">
            {balance} ИМБУЛЯ
          </div>

          {userAddress && (
            <div className="text-center text-sm text-gray-500 flex items-center justify-center space-x-2">
              <Wallet className="w-4 h-4" />
              <span>Прокачанный кошелёк: {userAddress.slice(0,6)}...{userAddress.slice(-4)}</span>
            </div>
          )}
        </motion.div>

        {!userAddress ? (
          <motion.div className="flex justify-center">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleConnect}
              disabled={loading}
              className="px-6 py-3 bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 flex items-center space-x-2"
            >
              {loading ? (
                <>
                  <Loader className="w-5 h-5 animate-spin" />
                  <span>Подключение...</span>
                </>
              ) : (
                <>
                  <Wallet className="w-5 h-5" />
                  <span>Подключить кошелёк</span>
                </>
              )}
            </motion.button>
          </motion.div>
        ) : (
          <div className="grid md:grid-cols-2 gap-6">
            <motion.div
              className="p-6 bg-white/80 backdrop-blur-sm rounded-xl shadow-lg"
              whileHover={{ boxShadow: "0 20px 25px -5px rgba(0, 0, 0, 0.1)" }}
            >
              <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center space-x-2">
                <Send className="w-5 h-5 text-purple-500" />
                <span>Отправить ИМБУЛЮ</span>
              </h2>
              <div className="space-y-4">
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Адрес получателя"
                    value={recipient}
                    onChange={(e) => setRecipient(e.target.value)}
                    className="w-full p-3 bg-white border border-gray-200 rounded-lg focus:ring-2 focus:ring-purple-500 outline-none transition-all"
                    disabled={loading}
                  />
                  <div className="text-xs text-gray-500 mt-1">*Внимание: получатель станет имбой!</div>
                </div>
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Количество ИМБУЛИ"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    className="w-full p-3 bg-white border border-gray-200 rounded-lg focus:ring-2 focus:ring-purple-500 outline-none transition-all"
                    disabled={loading}
                  />
                  <div className="text-xs text-gray-500 mt-1">*Рекомендуется не превышать power level 9000</div>
                </div>
                <button
                  onClick={handleTransfer}
                  disabled={loading || !recipient || !amount}
                  className="w-full p-3 bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-lg shadow-md hover:shadow-lg disabled:opacity-50 transition-all duration-300 flex items-center justify-center space-x-2"
                >
                  {loading ? (
                    <>
                      <Loader className="w-5 h-5 animate-spin" />
                      <span>Отправка...</span>
                    </>
                  ) : (
                    <>
                      <Send className="w-5 h-5" />
                      <span>Отправить</span>
                    </>
                  )}
                </button>
              </div>
            </motion.div>

            <motion.div
              className="p-6 bg-white/80 backdrop-blur-sm rounded-xl shadow-lg"
              whileHover={{ boxShadow: "0 20px 25px -5px rgba(0, 0, 0, 0.1)" }}
            >
              <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center space-x-2">
                <Crown className="w-5 h-5 text-purple-500" />
                <span>Создать ИМБУЛЮ</span>
              </h2>
              <div className="space-y-4">
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Адрес получателя"
                    value={mintRecipient}
                    onChange={(e) => setMintRecipient(e.target.value)}
                    className="w-full p-3 bg-white border border-gray-200 rounded-lg focus:ring-2 focus:ring-purple-500 outline-none transition-all"
                    disabled={loading}
                  />
                  <div className="text-xs text-gray-500 mt-1">*Адрес нового имбового героя</div>
                </div>
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Количество ИМБУЛИ"
                    value={mintAmount}
                    onChange={(e) => setMintAmount(e.target.value)}
                    className="w-full p-3 bg-white border border-gray-200 rounded-lg focus:ring-2 focus:ring-purple-500 outline-none transition-all"
                    disabled={loading}
                  />
                  <div className="text-xs text-gray-500 mt-1">*Выберите уровень имбалансности</div>
                </div>
                <button
                  onClick={handleMint}
                  disabled={loading || !mintRecipient || !mintAmount}
                  className="w-full p-3 bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-lg shadow-md hover:shadow-lg disabled:opacity-50 transition-all duration-300 flex items-center justify-center space-x-2"
                >
                  {loading ? (
                    <>
                      <Loader className="w-5 h-5 animate-spin" />
                      <span>Создание ИМБУЛИ...</span>
                    </>
                  ) : (
                    <>
                      <Crown className="w-5 h-5" />
                      <span>Создать ИМБУЛЮ</span>
                    </>
                  )}
                </button>
              </div>
            </motion.div>
          </div>
        )}

        <div className="text-center text-sm text-gray-500 mt-8">
          <p>* ИМБУЛЯ не несёт ответственности за внезапные победы и резкий рост скилла</p>
          <p>* Если вы видите это сообщение, значит вы уже имба!</p>
        </div>
      </motion.main>
    </div>
  );
}
