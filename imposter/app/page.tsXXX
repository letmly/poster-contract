"use client"
import Head from 'next/head'
import { useEffect, useState } from "react"
import Web3 from "web3"

const contractABI = [{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"string","name":"content","type":"string"},{"indexed":true,"internalType":"string","name":"tag","type":"string"}],"name":"NewPost","type":"event"},{"constant":false,"inputs":[{"internalType":"string","name":"content","type":"string"},{"internalType":"string","name":"tag","type":"string"}],"name":"post","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]
const contractAddress = "0xbff30E75f27CBF45185783b2DdBFf3cf1EB477Fa" // Замените на ваш адрес контракта

const AMOY_CHAIN_ID = '0x13882';
const AMOY_RPC_URL = 'https://rpc-amoy.polygon.technology';

const switchToAmoyNetwork = async () => {
    if (!window.ethereum) return false;
    try {
        await window.ethereum.request({
            method: 'wallet_switchEthereumChain',
            params: [{ chainId: AMOY_CHAIN_ID }],
        });
        return true;
    } catch (switchError: any) {
        if (switchError.code === 4902) {
            try {
                await window.ethereum.request({
                    method: 'wallet_addEthereumChain',
                    params: [{
                        chainId: AMOY_CHAIN_ID,
                        chainName: 'Polygon Amoy Testnet',
                        nativeCurrency: { name: 'POL', symbol: 'POL', decimals: 18 },
                        rpcUrls: [AMOY_RPC_URL],
                        blockExplorerUrls: ['https://www.oklink.com/amoy'],
                    }],
                });
                return true;
            } catch (addError) {
                console.error('Failed to add Polygon Amoy network', addError);
            }
        }
        console.error('Failed to switch to Polygon Amoy network', switchError);
    }
    return false;
};


export default function Home() {
  const [web3, setWeb3] = useState(undefined)
  const [userAddress, setUserAddress] = useState(undefined)
  const [contract, setContract] = useState(undefined)
  const [networkId, setNetworkId] = useState(null)
  const [posts, setPosts] = useState([])
  const [content, setContent] = useState('')
  const [tag, setTag] = useState('')
  const [filterTag, setFilterTag] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')

  // Проверка сети при загрузке
  useEffect(() => {
    checkNetwork()
    if (window.ethereum) {
      window.ethereum.on('chainChanged', () => {
        window.location.reload()
      })
      window.ethereum.on('accountsChanged', () => {
        window.location.reload()
      })
    }

    if (web3 && userAddress) {
      fetchPosts(contract, filterTag); // Передаем filterTag для фильтрации
    }

  }, [web3, userAddress, filterTag])

  const checkNetwork = async () => {
    if (window.ethereum) {
      try {
        const chainId = await window.ethereum.request({ method: 'eth_chainId' })
        setNetworkId(parseInt(chainId, 16))
      } catch (err) {
        console.error('Error checking network:', err)
      }
    }
  }

  const handleConnect = async () => {
    try {
        if (!window.ethereum) {
            throw new Error('MetaMask не установлен');
        }

        // Проверка и переключение на сеть Amoy
        const networkSwitched = await switchToAmoyNetwork();
        if (!networkSwitched) {
            throw new Error('Не удалось переключиться на сеть Amoy');
        }

        const web3Instance = new Web3(window.ethereum);
        await checkNetwork();

        // Запрос на подключение аккаунта
        const accounts = await window.ethereum.request({
            method: 'eth_requestAccounts'
        });

        if (!accounts || accounts.length === 0) {
            throw new Error('Не удалось получить адрес кошелька');
        }

        const address = accounts[0];

        // Создание экземпляра контракта с проверками
        const contractInstance = new web3Instance.eth.Contract(
            contractABI,
            contractAddress
        );

        if (!contractInstance) {
            throw new Error('Не удалось создать экземпляр контракта');
        }

        // Проверка что контракт существует
        try {
            await web3Instance.eth.getCode(contractAddress);
        } catch (err) {
            throw new Error('Неверный адрес контракта');
        }

        setUserAddress(address);
        setWeb3(web3Instance);
        setContract(contractInstance);

        fetchPosts(contractInstance);
    } catch (err) {
        setError(err.message || 'Ошибка подключения');
        console.error('Connection error:', err);
    }
  };

  const fetchPosts = async (contractInstance, tagFilter) => {
    try {
      setLoading(true)

      const filter = tagFilter ? { tag: tagFilter } : {};
      const events = await contractInstance.getPastEvents('NewPost', {
        fromBlock: 0,
        toBlock: 'latest',
        filter: filter,
      });

      const newPosts = events.map(event => ({
        user: event.returnValues.user,
        content: event.returnValues.content
      }));

      setPosts(newPosts);
    } catch (err) {
      console.error('Fetch posts error:', err);
      setError('Не удалось загрузить посты');
    } finally {
      setLoading(false);
    }
  };




  const handlePost = async () => {
    if (!content || !tag) {
      setError('Заполните контент и тег')
      return
    }

    if (!contract || !userAddress) {
      setError('Сначала подключите кошелек')
      return
    }

    setLoading(true)
    setError('')

    try {
      const gasPrice = await web3!.eth.getGasPrice();
      // Оценка газа перед отправкой транзакции
      const gasEstimate = await contract.methods.post(content, tag)
        .estimateGas({ from: userAddress })

      // Отправка транзакции с установленным лимитом газа
      const tx = await contract.methods.post(content, tag)
        .send({ 
          from: userAddress,
          gas: BigInt(Math.round(Number(gasEstimate) * 1.2)), // +20% к оценке газа
          gasPrice: gasPrice,
        })

      console.log('Transaction hash:', tx.transactionHash)
      
      setContent('')
      setTag('')
      await fetchPosts(contract)
    } catch (err) {
      console.error('Post error:', err)
      if (err.code === 4001) {
        setError('Транзакция отклонена пользователем')
      } else if (err.message.includes('gas')) {
        setError('Ошибка расчета газа. Проверьте баланс')
      } else {
        setError('Ошибка при создании поста. Проверьте консоль')
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen p-4">
      <Head>
        <title>Imposter DApp</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="max-w-4xl mx-auto space-y-8">
        {networkId && networkId !== 1 && (
          <div className="p-4 bg-yellow-100 text-yellow-700 rounded">
            Внимание: Вы подключены не к основной сети Ethereum
          </div>
        )}

        {!userAddress ? (
          <button
            onClick={handleConnect}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            Подключить кошелек
          </button>
        ) : (
          <div className="text-sm text-gray-500">
            Подключен: {userAddress}
          </div>
        )}

        {error && (
          <div className="p-4 bg-red-100 text-red-700 rounded">
            {error}
          </div>
        )}

        {userAddress && (
          <>
            <div className="space-y-4 p-6 bg-white rounded shadow">
              <h2 className="text-xl font-bold">Создать пост</h2>
              <input
                type="text"
                placeholder="Контент"
                value={content}
                onChange={(e) => setContent(e.target.value)}
                className="w-full p-2 border rounded"
                disabled={loading}
              />
              <input
                type="text"
                placeholder="Тег"
                value={tag}
                onChange={(e) => setTag(e.target.value)}
                className="w-full p-2 border rounded"
                disabled={loading}
              />
              <button
                onClick={handlePost}
                disabled={loading}
                className="w-full px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-blue-300"
              >
                {loading ? 'Отправка...' : 'Опубликовать'}
              </button>
            </div>

            <input
              type="text"
              placeholder="Фильтр по тегу"
              value={filterTag}
              onChange={(e) => setFilterTag(e.target.value)}
              className="w-full p-2 border rounded"
            />

            <div>
              {posts.map((post, index) => (
                <div key={index} className="p-6 bg-white rounded shadow">
                  <p className="text-sm text-gray-500 mb-2">Автор: {post.user}</p>
                  <p className="mb-2">{post.content}</p>
                </div>
              ))}
            </div>
          </>
        )}
      </main>
    </div>
  )
}

// ФФФФФФФФФФФФФФФФФФФФФФФФФФ